[
  {
    "name": "E-Commerce Platform for Chobani and FreshThyme",
    "techs": [
      "Next.js", "Material-UI", "Spring Boot", "MongoDB", "RESTful APIs"
    ],
    "description": "Contributed to the initial development and subsequent enhancement of Chobani and FreshThymeâ€™s e-commerce platform, focusing on both frontend and backend systems. Enhanced the cart, product browsing, backoffice, and promotions features, delivering a responsive UI with Next.js and Material-UI that improved user interaction by 25%. Designed and optimized RESTful APIs using Spring Boot and MongoDB, streamlining backend processes and ensuring efficient data management across the platform.",
    "github": "",
    "website": "https://www.chobani.com/",
    "imgSrc": "/Portfolio/images/web_application.jpeg",
    "type": "Featured Project"
  },
  {
    "name": "Personalized Product Recommendation System",
    "techs": [
      "Python", "TensorFlow", "Pandas", "scikit-learn", "SQL"
    ],
    "description": "Built a high-accuracy recommendation engine for an e-commerce platform using Python, TensorFlow, Pandas, and scikit-learn, achieving 90% model accuracy. Integrated the system with RESTful APIs to deliver tailored user experiences, leveraging predictive insights to enhance customer satisfaction.",
    "github": "",
    "website": "https://www.chobani.com/",
    "imgSrc": "/Portfolio/images/product_recommendation.jpeg",
    "type": "Featured Project"
  },
  {
    "name": "Sales Strategy Optimization and Predictive Modeling",
    "techs": [
      "Python", "Pandas", "NumPy", "scikit-learn", "Matplotlib"
    ],
    "description": "Developed advanced data integration and predictive modeling solutions for JD.com using Python and scikit-learn, enhancing the accuracy of delivery time forecasts and enabling actionable sales insights. The project resulted in a 30% improvement in sales strategy efficiency by leveraging data visualization with Matplotlib and advanced data processing with Pandas and NumPy to uncover key trends and opportunities.",
    "github": "https://github.com/Vamshi00111/Predictive-Modelling",
    "website": "",
    "imgSrc": "/Portfolio/images/DA_project.png",
    "type": "Side Project"
  },
  {
    "name": "Sorting Visualizer",
    "techs": [
      "Python", "Pygame"
    ],
    "description": "The Sorting Visualizer is an interactive Python application built with Pygame that visually demonstrates popular sorting algorithms such as Bubble Sort, Selection Sort, Insertion Sort, Quick Sort, and Merge Sort. This tool provides a dynamic and engaging way to understand the inner workings of each algorithm, allowing users to compare their performance and observe how different algorithms handle sorting in real-time.",
    "github": "https://github.com/Vamshi00111/Sorting-Visualizer",
    "website": "",
    "imgSrc": "/Portfolio/images/sorting_visualizer.png",
    "type": "Side Project"
  },
  {
    "name": "E-Commerce Web Application with H2 Database",
    "techs": [
      "Spring Boot", "Java", "H2 Database", "REST APIs"
    ],
    "description": "Developed a full-fledged E-Commerce Web Application using Spring Boot, with an integrated H2 in-memory database for efficient data storage and quick prototyping. The application features key e-commerce functionalities such as product browsing, cart management, and order processing, exposed through REST APIs for seamless integration. The use of the H2 database facilitates fast development and testing, allowing for a flexible and lightweight backend setup during the development phase.",
    "github": "https://github.com/Vamshi00111/SpringWebApp",
    "website": "",
    "imgSrc": "/Portfolio/images/spring_app.jpeg",
    "type": "Side Project"
  },
  {
    "name": "YouTube Clone",
    "techs": [
      "TypeScript", "Next.js", "Express.js", "Docker", "FFmpeg", "Firebase Auth", "Firebase Functions", "Firebase Firestore", "Google Cloud Storage", "Google Cloud Pub/Sub", "Google Cloud Run"
    ],
    "description": "Developed a YouTube clone that replicates core features of the video-sharing platform using a modern tech stack. The application is built with TypeScript and Next.js for a scalable and responsive frontend, while Express.js handles the backend logic. User authentication is managed using Firebase Auth, with video metadata and user data stored in Firebase Firestore. Videos are processed with FFmpeg, uploaded to Google Cloud Storage, and served through Google Cloud Run for efficient deployment. Real-time updates are handled via Google Cloud Pub/Sub, ensuring smooth video upload and streaming functionality. The project leverages Docker for containerization, ensuring consistency across development, testing, and production environments.",
    "github": "https://github.com/Vamshi00111/YouTube-Clone",
    "website": "",
    "imgSrc": "/Portfolio/images/youtube.png",
    "type": "Side Project"
  },
  {
    "name": "Movie Recommendation System",
    "techs": [
      "Python", "SQL", "Pandas", "NumPy", "scikit-learn", "Flask"
    ],
    "description": "Built an advanced Movie Recommendation System that leverages collaborative filtering and content-based filtering to suggest personalized movie recommendations based on user preferences. Using Python and scikit-learn, the system utilizes data processing libraries like Pandas and NumPy to handle large datasets and generate accurate recommendations. The system is integrated with a Flask API for easy access and scalability, allowing users to receive movie suggestions based on historical data and movie characteristics. The model achieved high accuracy and is designed to continuously improve by learning from user interactions.",
    "github": "https://github.com/Vamshi00111/Recommendation-System",
    "website": "",
    "imgSrc": "/Portfolio/images/recommendation_system.png",
    "type": "Side Project"
  },
  {
    "name": "Web Scraping with Python and AWS",
    "techs": [
      "Python", "BeautifulSoup", "Selenium", "AWS Lambda", "AWS S3", "AWS DynamoDB"
    ],
    "description": "Developed a web scraping application using Python with libraries like BeautifulSoup and Selenium for extracting data from dynamic and static websites. The application is designed to scrape product listings, prices, and other relevant information from e-commerce websites. To ensure scalability and automation, the scraping process is deployed on AWS Lambda for serverless execution, while scraped data is stored in AWS S3 for file storage and AWS DynamoDB for structured, queryable storage. The project also leverages AWS CloudWatch for monitoring and logging, ensuring that the scraping runs smoothly and efficiently, while maintaining the flexibility to scale as needed. ",
    "github": "https://github.com/Vamshi00111/Web-Scraping",
    "website": "",
    "imgSrc": "/Portfolio/images/web_scrapping.png",
    "type": "Side Project"
  }
]